---
- name: Add Docker GPG apt Key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker Repository
  ansible.builtin.apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu focal stable
    state: present

- name: Update apt and install docker-ce
  ansible.builtin.apt:
    name: docker-ce
    state: latest
    update_cache: true

- name: Allow running Docker without sudo
  ansible.builtin.user:
    name: "{{ ansible_user | default('ubuntu') }}"
    groups: docker
    append: true

- name: Restart docker to apply group changes
  ansible.builtin.systemd:
    name: docker
    state: restarted
    enabled: true

- name: Ensure Docker service is started and enabled
  ansible.builtin.systemd:
    name: docker
    enabled: true
    state: started

- name: Install unzip and curl
  ansible.builtin.apt:
    name:
      - unzip
    state: present

- name: Download AWS CLI installer
  ansible.builtin.get_url:
    url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
    dest: /tmp/awscliv2.zip
    mode: '0644'

- name: Unzip AWS CLI installer
  ansible.builtin.unarchive:
    src: /tmp/awscliv2.zip
    dest: /tmp
    remote_src: true

- name: Run AWS CLI installer
  ansible.builtin.command: /tmp/aws/install --update

- name: Ensure AWS CLI is available
  ansible.builtin.command: aws --version
  register: aws_cli_version
  changed_when: false

- name: Download CloudWatch Agent .deb package
  ansible.builtin.get_url:
    url: https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
    dest: /tmp/amazon-cloudwatch-agent.deb

- name: Install CloudWatch Agent (Ubuntu)
  ansible.builtin.apt:
    deb: /tmp/amazon-cloudwatch-agent.deb
    state: present

- name: Create CloudWatch Agent config file
  ansible.builtin.copy:
    dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
    content: |
      {
        "metrics": {
          "metrics_collected": {
            "mem": {
              "measurement": [
                "mem_used_percent"
              ],
              "metrics_collection_interval": 60
            },
            "disk": {
              "measurement": [
                "used_percent"
              ],
              "resources": [
                "/"
              ],
              "metrics_collection_interval": 60
            }
          },
          "append_dimensions": {
            "InstanceId": "${aws:InstanceId}"
          },
          "namespace": "CWAgent"
        }
      }

- name: Start CloudWatch Agent
  ansible.builtin.command: >
    /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl
    -a fetch-config
    -m ec2
    -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
    -s

###############################################################
# - name: Download and install Ollama
#   ansible.builtin.shell: |
#     curl -fsSL https://ollama.com/install.sh | sh
#   args:
#     executable: /bin/bash

- name: Create Ollama models directory if it doesn't exist
  ansible.builtin.file:
    path: /usr/share/ollama/.ollama/models/
    state: directory
    mode: '0755'
    recurse: true

- name: Print AWS credentials
  ansible.builtin.debug:
    msg: "AWS Access Key: {{ aws_access_key_id }}, AWS Secret Key: {{ aws_secret_access_key }}, AWS Region: {{ aws_region }}"
  
- name: Download models folder from S3
  ansible.builtin.command: >
    aws s3 cp s3://onboarding-task-bucket/models/ /usr/share/ollama/.ollama/models/ --recursive
  environment:
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_DEFAULT_REGION: "{{ aws_region }}"

- name: Set ownership of Ollama models folder to ubuntu:docker
  ansible.builtin.file:
    path: /usr/share/ollama/.ollama/models/
    owner: ubuntu
    group: docker
    recurse: true

# - name: Ensure Ollama service is stopped
#   ansible.builtin.systemd:
#     name: ollama
#     state: stopped
#     enabled: false

# - name: Add OLLAMA_HOST environment to ollama.service
#   ansible.builtin.lineinfile:
#     path: /etc/systemd/system/ollama.service
#     insertafter: '^\[Service\]'
#     line: 'Environment="OLLAMA_HOST=0.0.0.0:11434"'
#     create: false
#     state: present

# - name: Reload systemd daemon
#   ansible.builtin.systemd:
#     daemon_reload: true

# - name: Ensure Ollama service is started
#   ansible.builtin.systemd:
#     name: ollama
#     state: started
#     enabled: true

- name: Run ollama container
  community.docker.docker_container:
    name: ollama
    image: alpine/ollama
    state: started
    restart_policy: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - "/usr/share/ollama/.ollama/models:/root/.ollama/models"
